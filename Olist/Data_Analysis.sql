-- What is the total revenue generated by Olist, and how has it changed over time?
select * from order_payments limit 5;
select count(*) from orders;
select count(*) from order_payments;
select * from orders limit 5;

-- Updating the table columns
SET SQL_SAFE_UPDATES = 0;
update orders set order_purchase_timestamp = str_to_date(order_purchase_timestamp, "%m/%d/%Y %H:%i:%S");
update orders set order_approved_at = str_to_date(order_approved_at, "%Y-%m-%d %H:%i:%S");
update orders set order_delivered_carrier_date = str_to_date(order_delivered_carrier_date, "%Y-%m-%d %H:%i:%S");
update orders set order_delivered_customer_date = str_to_date(order_delivered_customer_date, "%Y-%m-%d %H:%i:%S");
update orders set order_estimated_delivery_date = str_to_date(order_estimated_delivery_date, "%Y-%m-%d %H:%i:%S");
SET SQL_SAFE_UPDATES = 1;

-- TOTAL REVENUE
select round(sum(payment_value),2) as Total_Revenue
from order_payments;

-- REVENUE BY YEAR
select format(sum(payment_value), 2) as Total_Revenue, year(order_estimated_delivery_date) as YEAR
from
order_payments left join orders
using (order_id)
group by YEAR;

-- BREAK DOWN BY MONTH
select
	YEAR(order_estimated_delivery_date) AS year, 
	MONTHNAME(order_estimated_delivery_date) AS month, 
	round(SUM(payment_value),2) as Revenue
from
	order_payments left join orders
using (order_id)
where order_purchase_timestamp is not null
group by 1,2
order by 1;


-- How many orders were placed on Olist, and how does this vary by month or season?
select count(distinct order_id) as Total_Orders
from orders
where order_purchase_timestamp is not null;

-- SEASON AND MONTH
select 
	month(order_purchase_timestamp) as month_no, 
	monthname(order_purchase_timestamp) as Month, 
	YEAR(order_purchase_timestamp) as YEAR, 
	quarter(order_purchase_timestamp) as QTR, 
	count(order_id) as Total_Orders
from orders
where order_purchase_timestamp is not null
group by 3, 4, 2
order by 5;

-- What are the most popular product categories on Olist? 
-- how do their sales volumes compare to each other?
select English_product_cat_name as Category, count(*) as Orders_per_category
from products
group by 1
order by 2 desc;

select 
p.English_product_cat_name as Category, round(SUM(o.payment_value),2) as Revenue
from 
	products p inner join order_items oi 
	USING (product_id)
	inner join order_payments o
	USING (order_id)
	left join orders ord
	USING (order_id)
where ord.order_purchase_timestamp is not null
group by 1
order by 2 desc;



-- What is the average order value (AOV) on Olist? 
-- how does this vary by product category or payment method?

-- Overall Average Order Value
select round(sum(payment_value)/count( distinct order_id),2) as AOV
from  order_payments;

-- By category
select p.English_product_cat_name as category, round((SUM(pa.payment_value)/count(o.order_id)),2) as AOV
from
orders o join order_payments pa
using (order_id) 
join order_items oi
using (order_id)
join products p
using (product_id)
group by 1
order by 2 desc;

-- by Payment Type
select pa.payment_type, round((SUM(pa.payment_value)/count(o.order_id)),2) as AOV
from 
order_payments pa join orders o
using (order_id)
group by 1
order by 2 desc;

-- How many sellers are active on Olist, and how does this number change over time?
select * from sellers limit 5;
describe order_items;
desc orders;
select min(order_purchase_timestamp) first_date, DATE_ADD(min(order_purchase_timestamp), interval -6 MONTH) last_date
from orders;

select count(distinct seller_id) from sellers;

with last_date (date_val) 
as
(
select DATE_ADD(max(order_purchase_timestamp), interval -6 MONTH) last_date 
from orders
)
select count(distinct s.seller_id) as Active_Users
from sellers s join order_items oi
USING(seller_id)
join orders o 
USING(order_id)
where o.order_purchase_timestamp >= (select date_val from last_date); 

select 	year(o.order_estimated_delivery_date) as Year,
		monthname(o.order_estimated_delivery_date) as Month,
		count(distinct s.seller_id) as Active_sellers
from sellers s join order_items oi
USING (seller_id)
join orders o
USING (order_id)
group by 1, 2
order by 3 desc;

-- What is the distribution of seller ratings on Olist, and how does this impact sales performance?
select * from orders limit 5;
describe reviews;
describe sellers;
describe order_items;
describe orders;

select r.review_score as rating, count(o.order_id) Total_Orders, round(sum(pa.payment_value),2) as Sales
from orders o join reviews r
using (order_id)
join order_items oi using(order_id)
join order_payments pa using(order_id)
where order_status <> 'cancelled' and order_approved_at is not null
group by 1
order by 3 desc;

-- How many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?
		-- Explore the tables to use. CUSTOMERS AND ORDERS
select * from customers limit 5;

select count(*) as Total_repeat_customers
from
(
	select customer_unique_id, count(customer_unique_id)
	from customers
	group by 1
	having count(customer_unique_id) > 1
	order by 2 desc
)x;

-- The point here is to join the customers, payments and order tables.
-- The aim is to find the total sales by each repeat customer, and how many orders they had.
select c.customer_unique_id as Cust_Name, ROUND(sum(pa.payment_value),2) as Sales, count(o.order_id) as No_of_orders
from
customers c join orders o 
USING(customer_id)
join order_payments pa 
USING(order_id)
group by 1
having count(customer_unique_id) > 1
order by 2 desc, 3;

with repeat_customers (customer, spent, order_id)
as 
(
	select c.customer_unique_id as Cust_Name, ROUND(sum(pa.payment_value),2) as Sales, o.order_id
	from
	customers c join orders o 
	USING(customer_id)
	join order_payments pa 
	USING(order_id)
	group by 1
	having count(customer_unique_id) > 1
	order by 2 desc, 3
)
select sum(spent) as Sales_for_repeats, sum(payment_value) as Total_Sales, round(sum(spent)/sum(payment_value)*100,2) as repeats_sales_ratio
from 
repeat_customers right join order_payments
using(order_id);

-- What is the average customer rating for products sold on Olist, and how does this impact sales performance?
select * from reviews limit 5;
select * from customers limit 5;

-- select avg(review_score) as avg_rating from reviews;
describe products;
desc reviews;
desc order_payments;
desc order_items;
desc orders;

select p.English_product_cat_name as category, ROUND(avg(r.review_score),2) as avg_score,
		ROUND(sum(pa.payment_value),2) as Revenue_per_category, ROUND(sum(pa.payment_value)/COUNT(distinct o.order_id),2) as avg_revenue
from products p join order_items oi 
USING(product_id)
join reviews r Using(order_id)
join order_payments pa using(order_id)
join orders o using (order_id)
where order_status <> 'canceled' and order_approved_at is not null
group by 1
order by 3 desc;

select r.review_score, count(o.order_id) Total_Orders, round(sum(pa.payment_value),2) Sales_Total
from reviews r join orders o
using(order_id)
join order_payments pa using(order_id)
group by 1
order by 3 desc, 2; 

-- What is the average order cancellation rate on Olist, and how does this impact seller performance?
describe products;
desc reviews;
desc order_payments;
desc order_items;
desc orders;
select distinct(order_status)
from orders;


with cancelled (id, status)
as
(
select order_id, order_status from orders
where order_status = 'canceled'
)
select (count(c.id)/ count(o.order_id))*100 as cancellation_rate
from cancelled c right join orders o 
on c.id = o.order_id;

-- What are the top-selling products on Olist, and how have their sales trends changed over time?

select p.English_product_cat_name as Category, count(oi.product_id) as Total_Products, round(sum(pa.payment_value),2) Revenue
from products p join order_items oi 
USING(product_id)
join order_payments pa using(order_id)
group by 1
order by 3 desc;

select year(o.order_purchase_timestamp) as Year, p.English_product_cat_name as Category, count(oi.product_id) as Total_Products,
		round(sum(pa.payment_value),2) Revenue
from products p join order_items oi 
USING(product_id)
join order_payments pa using(order_id)
join orders o using(order_id)
where order_status <> 'canceled' and order_purchase_timestamp is not null
group by 1, 2
order by 1,3 desc;

-- Which payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?
desc order_payments;
select distinct(payment_type) from order_payments;
select payment_type, count(payment_type) use_frequency
from order_payments
group by 1
order by 2 desc;

select  p.English_product_cat_name as Category, pa.payment_type, count(pa.payment_type) use_frequency
from products p join order_items oi 
USING(product_id)
join order_payments pa
using(order_id)
join orders o using(order_id)
where o.order_status <> 'canceled'
group by 1,2
order by 3 desc;

-- Which product categories have the highest profit margins on Olist, and how can the company increase profitability across different categories?
desc order_payments;
desc order_items;
desc products;

select p.English_product_cat_name as Category, round((sum(pa.payment_value)-(sum(oi.price)+sum(oi.freight_value)))/sum(pa.payment_value)*100,2) as Profit_margin
from products p join order_items oi using(product_id)
join order_payments pa using(order_id)
group by 1
order by 2 desc;




 

































